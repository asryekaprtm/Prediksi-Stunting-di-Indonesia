# -*- coding: utf-8 -*-
"""Prediksi Stunting.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jWyyVV0geFY-S6Sg11H2DoMGGJeRFodY
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline
import warnings
warnings.filterwarnings("ignore")
import plotly as py
import plotly.graph_objs as go
!pip install pygam

#koneksi dari COLAB ke Gdrive
from google.colab import drive
drive.mount('/content/drive')

# Loading Data

path = '/content/drive/MyDrive/TA/dataset stuning.xlsx'

df = pd.read_excel(path)
df

"""# Business Understanding
## Judul Proyek:

## Tujuan Proyek:
Tujuan proyek ini adalah Untuk memprediksi angka stunting di tahun 2023 dan memberikan strategi kebijakan penanganan stunting di Indonesia yang sesuai dengan kondisi dan kebutuhan masing-masing provinsi.

## Data Proyek:
Data yang sediakan melibatkan informasi terkait Faktor Kesehatan (Imunisasi, Penolong persalinan oleh tenaga kesehatan di fasilitas kesehatan ,KB modern, Persentase Balita Stunting), Faktor Gizi (ASI eksklusif dan MP ASI), Faktor Perumahan (Persentase Air Layak Minum dan Sanitasi layak), Faktor Pangan (Ketidakcukupan konsumsi pangan)Faktor Pendidikan (Pendidikan Anak Usia Dini (PAUD)) Faktor perlindungan sosial (Kepemilikan JKN/jamkesda) Faktor Ekonomi(Persentase Penduduk Miskin) di setiap provinsi Indonesia. Data ini mencakup tahun 2021-2022


## Goals :
1. Memprediksi Angka Stunting Di Tahun 2023(Prediksi)

2. Strategi untuk Menurunkan Angka STUNTING di INDONESIA


# Data Understanding
## Data Proyek:
Data yang diberikan mencakup informasi dari berbagai provinsi di Indonesia dan melibatkan beberapa variabel kunci yang dapat mempengaruhi tingkat stunting. Berikut adalah ringkasan variabel dalam dataset:

1. Faktor Kesehatan:
 - Imunisasi (Persentase anak usia 12-23 bulan yang menerima imunisasi dasar lengkap)
 - Penolong persalinan oleh tenaga kesehatan di fasilitas kesehatan(Persentase Perempuan Pernah Kawin (PPK) usia 15-49 tahun yang proses melahirkan terakhirnya ditolong oleh tenaga kesehatan terlatih di fasilitas kesehatan)
 - Keluarga Berencana (KB) modern (Proporsi perempuan usia reproduksi (15-49 tahun) atau pasangannya yang aktif secara seksual dan ingin menunda untuk memiliki anak atau tidak ingin menambah anak lagi dan menggunakan alat kontrasepsi metode modern)
 - Persentase Balita Stunting(Persentase Balita Stunting Di indonesia)

2. Faktor gizi:
 - ASI eksklusif(Persentase bayi usia kurang dari enam bulan yang mendapatkan ASI eksklusif)
 - Makanan Pendamping (MP) ASI (Persentase anak usia 6-23 bulan yang mendapatkan makanan pendamping ASI)

3. Faktor perumahan:
 - Air minum layak (Persentase rumah tangga yang memiliki akses terhadap layanan sumber air minum layak)
 - Sanitasi layak (Persentase rumah tangga yang memiliki akses terhadap layanan sanitasi layak dan berkelanjutan)

4. Faktor Pangan:
 - Ketidakcukupan konsumsi pangan (Prevalensi populasi yang tidak mengalami kecukupan konsumsi pangan (Prevalence of Undernourishment (PoU)))
5. Faktor Pendidikan:
 - Pendidikan Anak Usia Dini (PAUD)(Angka Partisipasi Kasar (APK) PAUD 3-6 tahun)

6. Faktor perlindungan sosia:
 - Kepemilikan JKN/jamkesda (Persentase penduduk yang memiliki JKN/jamkesda)

7. Faktor Ekonomi :
 - Persentase Penduduk Miskin(Persentase Kemiskinan menurut provinsi)

8. Tahun Data:
Data tercatat untuk tahun 2021-2022

## Metode Analisis:
1. Analisis Korelasi:
Mengidentifikasi hubungan antar variabel untuk mengetahui apakah ada korelasi.

2. Analisis Spasial:
Menganalisis pola geografis tingkat stunting di berbagai provinsi.
"""

kolom_numerik = ['Imunisasi','Penolong persalinan oleh tenaga kesehatan di fasilitas kesehatan','KB modern'	,'ASI eksklusif','MP ASI','Persentase Air Layak Minum','Persentase Sanitasi Layak'	,'Ketidakcukupan konsumsi pangan'	,'PAUD'	,'Kepemilikan JKN/jamkesda','Persentase Penduduk Miskin'	,'Persentase Balita Stunting']
df_numerik = df[kolom_numerik]

# Hitung korelasi dan gambarkan heatmap
f, ax = plt.subplots(figsize=(10, 10))
plt.title("Pearson Correlation")
sns.heatmap(df_numerik.corr(), linewidth=0.25, vmax=1.0, square=True, cmap="crest", linecolor='black', annot=True)
plt.show()

"""# Analisis Hasil Pearson Correlation
1. Korelasi antara Imunisasi dan Persentase Balita Stunting (-0.33):
Terdapat korelasi negatif yang sedang antara imunisasi dan persentase balita stunting (-0.33). Ini menunjukkan bahwa semakin tinggi tingkat imunisasi, semakin rendah persentase balita stunting, dan sebaliknya.

2. Korelasi antara Penolong Persalinan oleh tenaga Kesehatan di fasilitas kesehatan dan Persentase Balita Stunting (-0.42):
Terdapat korelasi negatif yang cukup kuat antara penolong persalinan oleh tenaga kesehatan di fasilitas kesehatan dan persentase balita stunting (-0.45). Artinya, semakin banyak penolong persalinan oleh tenaga kesehatan di fasilitas kesehatan, semakin rendah persentase balita stunting.

3. Korelasi antara KB Modern dan Persentase Balita Stunting (-0.3):
Terdapat korelasi negatif yang sedang antara penggunaan KB modern dan persentase balita stunting (-0.3). Hal ini menunjukkan bahwa adanya penggunaan KB modern dapat berkaitan dengan penurunan persentase balita stunting.

4. Korelasi antara ASI Eksklusif dan Persentase Balita Stunting (0.079):
Terdapat korelasi positif yang sangat lemah antara ASI eksklusif dan persentase balita stunting (0.079). Meskipun positif, hubungan ini tidak cukup kuat untuk menyimpulkan adanya hubungan linear yang signifikan.

5. Korelasi antara MP ASI dan Persentase Balita Stunting (-0.22):
Terdapat korelasi negatif yang lemah antara MP ASI dan persentase balita stunting (-0.22). Ini menunjukkan bahwa semakin tinggi persentase MP ASI, semakin rendah persentase balita stunting, meskipun hubungannya tidak begitu kuat.

6. Korelasi antara Persentase Air Layak Minum dan Persentase Balita Stunting (-0.31):
Terdapat korelasi negatif yang sedang antara persentase air layak minum dan persentase balita stunting (-0.31). Ini menunjukkan bahwa semakin tinggi persentase air layak minum, semakin rendah persentase balita stunting.

7. Korelasi antara Persentase Sanitasi Layak dan Persentase Balita Stunting (-0.55):
Terdapat korelasi negatif yang cukup kuat antara persentase sanitasi layak dan persentase balita stunting (-0.55). Ini menunjukkan bahwa semakin tinggi persentase sanitasi layak, semakin rendah persentase balita stunting.

8. Korelasi antara Ketidakcukupan konsumsi pangan dan Persentase Balita Stunting (0.26):
Terdapat korelasi positif yang lemah antara ketidakcukupan konsumsi pangan dan persentase balita stunting (0.26). Ini menunjukkan bahwa adanya ketidakcukupan konsumsi pangan dapat berkaitan dengan peningkatan persentase balita stunting.

9. Korelasi antara PAUD dan Persentase Balita Stunting (-0.062):
Terdapat korelasi negatif yang sangat lemah antara PAUD dan persentase balita stunting (-0.062). Korelasi ini tidak cukup kuat untuk menyimpulkan hubungan yang signifikan antara kedua variabel ini.

10. Korelasi antara Kepemilikan JKN/Jamkesda dan Persentase Balita Stunting (0.22):
Terdapat korelasi positif yang lemah antara kepemilikan JKN/Jamkesda dan persentase balita stunting (0.22). Ini menunjukkan bahwa adanya kepemilikan JKN/Jamkesda dapat berkaitan dengan peningkatan persentase balita stunting.

11. Korelasi antara Persentase Penduduk Miskin dan Persentase Balita Stunting (0.52):
Terdapat korelasi positif yang cukup kuat antara persentase penduduk miskin dan persentase balita stunting (0.52). Ini menunjukkan bahwa semakin tinggi persentase penduduk miskin, semakin tinggi persentase balita stunting.

## Data Preparation
"""

print('Data Null ?')
print(df.isnull().sum())

print(df.dtypes)

# batas kategori
bins = [0, 20, 29, 39, float('inf')]
labels = ['Rendah', 'Menengah', 'Tinggi', 'Sangat Tinggi']

# Buat kolom baru dengan kategori
df['Kategori Stunting'] = pd.cut(df['Persentase Balita Stunting'], bins=bins, labels=labels, right=False)

# Tampilkan DataFrame setelah penambahan kolom kategori
df

plt.figure(figsize=(23, 10))

# List of variables for the x-axis
x_vars = ['Imunisasi', 'Penolong persalinan oleh tenaga kesehatan di fasilitas kesehatan', 'KB modern', 'ASI eksklusif', 'MP ASI', 'Persentase Air Layak Minum', 'Persentase Sanitasi Layak', 'Ketidakcukupan konsumsi pangan', 'PAUD', 'Kepemilikan JKN/jamkesda']

# Create subplots
for i, x_var in enumerate(x_vars, 1):
    plt.subplot(3, 4, i)  # Adjust the number of rows and columns based on your preference
    sns.scatterplot(x=x_var, y='Persentase Balita Stunting', data=df)
    plt.xlabel(x_var)
    plt.ylabel('Persentase Balita Stunting')

plt.tight_layout()
plt.show()

# Menentukan input variabel

x = df[['Imunisasi','Penolong persalinan oleh tenaga kesehatan di fasilitas kesehatan','KB modern'	,'ASI eksklusif','MP ASI','Persentase Air Layak Minum','Persentase Sanitasi Layak'	,'Ketidakcukupan konsumsi pangan'	,'PAUD'	,'Kepemilikan JKN/jamkesda','Persentase Penduduk Miskin']]

# Menentukan target variabel

y = df ['Persentase Balita Stunting']

"""# Hasil Data Preperation
- Tidak Terdapat Missing Value
- Melakukan Visualisasi ScatterPlot Untuk melihat sebaran data, Untuk melihat Apakah terdapat linear regresion. Dan dari hasil visualisasi tidak terdapat Regresion
- Melakukan konversi tipe data di varibel Persentase Balita Stunting menjadi kategori karena salah satu syarat Regresi logistik untuk memprediksi probabilitas keanggotaan dalam suatu kategori atau kelas.
- Melakukan pemisahan data menjadi training set dan testing set dan melakukan standarisasi atau normalisasi, Ini membantu agar variabel dengan skala yang berbeda dapat memiliki dampak yang seimbang pada model.

# Pemodelan
"""

# untuk model
from sklearn.svm import SVR
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor
from pygam import LinearGAM

# untuk evaluasi model
from sklearn.metrics import mean_absolute_error, r2_score, mean_squared_error

# untuk split data kita menjadi training dan testing
from sklearn.model_selection import train_test_split

# split data kita menjadi training dan testing, SPLIT 80% dan 20% testing
x_train, x_test, y_train,  y_test=train_test_split(x,y, test_size=0.2, random_state=0)
# Tampilkan ukuran dari training set dan testing set
print("Ukuran Training Set:", len(x_train))
print("Ukuran Testing Set:", len(x_test))

"""# Support Vector Regression (SVR)"""

# Support Vector Regression (SVR)
from sklearn.svm import SVR

svr_model = SVR(kernel='linear')
svr_model.fit(x_train, y_train)
y_pred_svr = svr_model.predict(x_test)

# 1. Mean Absolute Error (MAE)
mae = mean_absolute_error(y_test, y_pred_svr)
print(f'Mean Absolute Error (MAE): {mae}')

# 2. R-squared (R2_Score)
r2 = r2_score(y_test, y_pred_svr)
print(f'R-squared (R2_Score): {r2}')

# 3. Mean Squared Error (MSE)
mse = mean_squared_error(y_test, y_pred_svr)
print(f'Mean Squared Error (MSE): {mse}')

# 4. Root Mean Squared Error (RMSE)
rmse = np.sqrt(mse)
print(f'Root Mean Squared Error (RMSE): {rmse}')

# 5. MAPE (Mean Absolute Percentage Error)
def mape(y_true, y_pred):
    return np.mean(np.abs((y_true - y_pred_svr) / y_true)) * 100

mape_value = mape(y_test, y_pred_svr)
print(f'MAPE (Mean Absolute Percentage Error): {mape_value}')

"""2. Hasil Evaluasi Model Support Vector Regression (SVR)
 - Mean Absolute Error (MAE): 3.616054767985198
 - R-squared (R2_Score): 0.49725569671336123
 - Mean Squared Error (MSE): 18.370610294948
 - Root Mean Squared Error (RMSE): 4.286094993691577
 - MAPE (Mean Absolute Percentage Error): 16.09682419650858

# Decision Trees Regression
"""

# Decision Trees Regression
from sklearn.tree import DecisionTreeRegressor

dt_model = DecisionTreeRegressor()
dt_model.fit(x_train, y_train)
y_pred_dt = dt_model.predict(x_test)

# 1. Mean Absolute Error (MAE)
mae = mean_absolute_error(y_test, y_pred_dt)
print(f'Mean Absolute Error (MAE): {mae}')

# 2. R-squared (R2_Score)
r2 = r2_score(y_test, y_pred_dt)
print(f'R-squared (R2_Score): {r2}')

# 3. Mean Squared Error (MSE)
mse = mean_squared_error(y_test, y_pred_dt)
print(f'Mean Squared Error (MSE): {mse}')

# 4. Root Mean Squared Error (RMSE)
rmse = np.sqrt(mse)
print(f'Root Mean Squared Error (RMSE): {rmse}')

# 5. MAPE (Mean Absolute Percentage Error)
def mape(y_true, y_pred):
    return np.mean(np.abs((y_true - y_pred_dt) / y_true)) * 100

mape_value = mape(y_test, y_pred_dt)
print(f'MAPE (Mean Absolute Percentage Error): {mape_value}')

"""3. Hasil Evaluasi Model Decision Trees Regression
 - Mean Absolute Error (MAE): 2.942857142857143
 - R-squared (R2_Score): 0.5523187056075356
 - Mean Squared Error (MSE): 16.35857142857142
 - Root Mean Squared Error (RMSE): 4.04457308359874
 - MAPE (Mean Absolute Percentage Error): 11.82653148162688

# Random Forest Regression
"""

# Random Forest Regression
from sklearn.ensemble import RandomForestRegressor

rf_model = RandomForestRegressor(n_estimators=1000)
rf_model.fit(x_train, y_train)
y_pred_rf = rf_model.predict(x_test)

# 1. Mean Absolute Error (MAE)
mae = mean_absolute_error(y_test, y_pred_rf)
print(f'Mean Absolute Error (MAE): {mae}')

# 2. R-squared (R2_Score)
r2 = r2_score(y_test, y_pred_rf)
print(f'R-squared (R2_Score): {r2}')

# 3. Mean Squared Error (MSE)
mse = mean_squared_error(y_test, y_pred_rf)
print(f'Mean Squared Error (MSE): {mse}')

# 4. Root Mean Squared Error (RMSE)
rmse = np.sqrt(mse)
print(f'Root Mean Squared Error (RMSE): {rmse}')

# 5. MAPE (Mean Absolute Percentage Error)
def mape(y_true, y_pred):
    return np.mean(np.abs((y_true - y_pred_rf) / y_true)) * 100

mape_value = mape(y_test, y_pred_rf)
print(f'MAPE (Mean Absolute Percentage Error): {mape_value}')

"""5. Hasil Evaluasi Model Random Forest Regression
 - Mean Absolute Error (MAE): 2.396178571428582
 - R-squared (R2_Score): 0.7011575449129213
 - Mean Squared Error (MSE): 10.919901520714316
 - Root Mean Squared Error (RMSE): 3.304527427744293
 - MAPE (Mean Absolute Percentage Error): 9.69525200871868

5 Hasil Evaluasi Model Gradient Boosting Regression
 - Mean Absolute Error (MAE): 2.867174094494414
 - R-squared (R2_Score): 0.6825596670321055
 - Mean Squared Error (MSE): 11.599480313806486
 - Root Mean Squared Error (RMSE): 3.405800979770616
 - MAPE (Mean Absolute Percentage Error): 11.754548798736995

# Generalized Additive Models (GAM)
"""

# Generalized Additive Models (GAM)
from pygam import LinearGAM

gam_model = LinearGAM().fit(x_train, y_train)
y_pred_gam = gam_model.predict(x_test)

# 1. Mean Absolute Error (MAE)
mae = mean_absolute_error(y_test, y_pred_gam)
print(f'Mean Absolute Error (MAE): {mae}')

# 2. R-squared (R2_Score)
r2 = r2_score(y_test, y_pred_gam)
print(f'R-squared (R2_Score): {r2}')

# 3. Mean Squared Error (MSE)
mse = mean_squared_error(y_test, y_pred_gam)
print(f'Mean Squared Error (MSE): {mse}')

# 4. Root Mean Squared Error (RMSE)
rmse = np.sqrt(mse)
print(f'Root Mean Squared Error (RMSE): {rmse}')

# 5. MAPE (Mean Absolute Percentage Error)
def mape(y_true, y_pred):
    return np.mean(np.abs((y_true - y_pred_gam) / y_true)) * 100

mape_value = mape(y_test, y_pred_gam)
print(f'MAPE (Mean Absolute Percentage Error): {mape_value}')

"""6. Hasil Evaluasi Model Generalized Additive Models (GAM)
 - Mean Absolute Error (MAE): 3.4523990625904024
 - R-squared (R2_Score): 0.26539681390335623
 - Mean Squared Error (MSE): 26.842887656778466
 - Root Mean Squared Error (RMSE): 5.181012223183657
 - MAPE (Mean Absolute Percentage Error): 14.206589514221351

# Analisis Evaluasi Model
1. MLP Regressor:
 - MAE: 5.51
 - R2_Score: -0.37
 - MSE: 50.10
 - RMSE: 7.08
 - MAPE: 26.87%
2. Support Vector Regression (SVR):
 - MAE: 3.90
 - R2_Score: 0.41
 - MSE: 21.43
 - RMSE: 4.63
 - MAPE: 17.85%
3. Decision Trees Regression:
 - MAE: 3.58
 - R2_Score: 0.45
 - MSE: 20.09
 - RMSE: 4.48
 - MAPE: 17.38%
4. Random Forest Regression:
 - MAE: 2.43
 - R2_Score: 0.75
 - MSE: 9.31
 - RMSE: 3.05
 - MAPE: 10.78%
5. Gradient Boosting Regression:
 - MAE: 2.87
 - R2_Score: 0.68
 - MSE: 11.60
 - RMSE: 3.41
 - MAPE: 11.75%
6. Generalized Additive Models (GAM):
 - MAE: 3.86
 - R2_Score: 0.17
 - MSE: 30.38
 - RMSE: 5.51
 - MAPE: 16.21%

Berdasarkan hasil evaluasi di atas, saya dapat menyimpulkan hal-hal berikut:
- Model Random Forest Regression memiliki performa terbaik di antara semua model yang uji, karena memiliki nilai R-squared tertinggi (0.745), yang menunjukkan bahwa model ini dapat menjelaskan 74.5% variasi data. Model ini juga memiliki nilai MAE, MSE, RMSE, dan MAPE terendah, yang menunjukkan bahwa model ini memiliki tingkat kesalahan dan deviasi terkecil dari data asli. Nilai MAPE model ini adalah 10.78%, yang berarti tingkat kesuksesan model ini adalah 89.22%.
- Model Gradient Boosting Regression memiliki performa kedua terbaik di antara semua model yang uji, karena memiliki nilai R-squared kedua tertinggi (0.683), yang menunjukkan bahwa model ini dapat menjelaskan 68.3% variasi data. Model ini juga memiliki nilai MAE, MSE, RMSE, dan MAPE kedua terendah, yang menunjukkan bahwa model ini memiliki tingkat kesalahan dan deviasi yang relatif kecil dari data asli. Nilai MAPE model ini adalah 11.75%, yang berarti tingkat kesuksesan model ini adalah 88.25%.
- Model Decision Trees Regression, Support Vector Regression (SVR), dan Generalized Additive Models (GAM) memiliki performa yang kurang baik di antara semua model yang uji, karena memiliki nilai R-squared yang rendah (0.450, 0.414, dan 0.169), yang menunjukkan bahwa model-model ini tidak dapat menjelaskan variasi data dengan baik. Model-model ini juga memiliki nilai MAE, MSE, RMSE, dan MAPE yang tinggi, yang menunjukkan bahwa model-model ini memiliki tingkat kesalahan dan deviasi yang besar dari data asli. Nilai MAPE model-model ini berkisar antara 16.21% hingga 17.85%, yang berarti tingkat kesuksesan model-model ini berkisar antara 82.15% hingga 83.79%.
- Model MLP Regressor memiliki performa terburuk di antara semua model yang Anda uji, karena memiliki nilai R-squared negatif (-0.371), yang menunjukkan bahwa model ini lebih buruk daripada model rata-rata. Model ini juga memiliki nilai MAE, MSE, RMSE, dan MAPE tertinggi, yang menunjukkan bahwa model ini memiliki tingkat kesalahan dan deviasi terbesar dari data asli. Nilai MAPE model ini adalah 26.9%, yang berarti tingkat kesuksesan model ini adalah 73.1%.


Berdasarkan hasil Analisis evaluasi model di atas, dapat disimpulkan bahwa model Random Forest Regression memiliki kinerja paling baik, ditunjukkan dengan MAE yang paling rendah, R2_Score yang paling tinggi, serta RMSE dan MAPE yang paling kecil dibandingkan dengan model lainnya.Oleh karena itu, model Random Forest Regression akan untuk memprediksi angka stunting di Indonesia.
"""

# Eksport to excel

# Eksport to download if in colab
from google.colab import files

File = df.to_excel('Dataset Stunting Pemodelan.xlsx')
files.download('Dataset Stunting Pemodelan.xlsx')

"""# Implementasi model ke data baru(Implement to machine learning) menggunakan Algoritma Random Forest Regressor"""

pd.options.display.max_rows = 10

pd.options.display.min_rows

path1 = '/content/drive/MyDrive/TA/dataset stunting baru.xlsx'
df_dataset1 = pd.read_excel(path1)
df1 = pd.DataFrame(df_dataset1)
df1
df_dataset1

print(df1.dtypes)

x1 = df1[['Imunisasi','Penolong persalinan oleh tenaga kesehatan di fasilitas kesehatan','KB modern'	,'ASI eksklusif','MP ASI','Persentase Air Layak Minum','Persentase Sanitasi Layak'	,'Ketidakcukupan konsumsi pangan'	,'PAUD'	,'Kepemilikan JKN/jamkesda','Persentase Penduduk Miskin']]
x1

y_pred_rf = rf_model.predict(x1)
y_pred_rf

# Mengubah hasil pemodelan yang  berbentuk array menjadi dataframe
df_y_predict_rf = pd.DataFrame({'Prediction_Persentase Balita Stunting': y_pred_rf}).round(2)
df_y_predict_rf

# Menggabungkan Dataset dengan hasil predictnya

df_hasil_predict_rf = pd.concat([df1,df_y_predict_rf], sort=False, axis=1)
df_hasil_predict_rf

# Tentukan batas kategori
bins = [0, 20, 29, 39, 100]
labels = ['Rendah', 'Menengah', 'Tinggi', 'Sangat Tinggi']

# Buat kolom baru dengan kategori
df_hasil_predict_rf['Kategori Stunting'] = pd.cut(df_hasil_predict_rf['Prediction_Persentase Balita Stunting'], bins=bins, labels=labels, right=False)

# Tampilkan DataFrame setelah penambahan kolom kategori
df_hasil_predict_rf

# Eksport to excel

# Eksport to download if in colab
from google.colab import files

File = df_hasil_predict_rf.to_excel('File Prediction Stunting.xlsx',sheet_name='predict')
files.download('File Prediction Stunting.xlsx')